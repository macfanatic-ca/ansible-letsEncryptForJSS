#!/bin/bash

# Grab variables
source /root/etc/certbot-JamfPro

sendToLog () {
if [ "$debug" == "true" ]; then
    logMessage=${*}
    date=`date "+%Y-%m-%d_%H:%M:%S"`
    echo "$date - $logMessage" >> $logLocation
fi
}

# Backup and modify java keystore
updateKeystore() {
  # Backup old keystore
  if [ $backupKeystore == true ]; then
    sendToLog "Backing up old Keystore"
    cp -R $keystoreDir "$keystoreDir".old
  fi

  # Remove old certs
  sendToLog "Removing old Certificates"
  $keytoolPATH -delete -alias root -storepass $keystorePass -keystore $keystoreDir
  $keytoolPATH -delete -alias tomcat -storepass $keystorePass -keystore $keystoreDir
  $keytoolPATH -delete -alias cacert -storepass $keystorePass -keystore $keystoreDir

  # Create P12
  sendToLog "Creating P12 bundle"
  /bin/openssl pkcs12 -export -in $certDir/fullchain.pem -inkey $certDir/privkey.pem -out   $ertDir/cert_and_key.p12 -name tomcat -CAfile $certDir/chain.pem -caname root -password  pass:$keystorePass

  # Import P12 into keystore
  sendToLog "Importing P12 into keystore"
  $keytoolPATH -importkeystore -srcstorepass $keystorePass -deststorepass $keystorePass -destkeypass  $eystorePass -srckeystore $certDir/cert_and_key.p12 -srcstoretype PKCS12 -alias tomcat -keystore   $eystoreDir
    $keytoolPATH -import -trustcacerts -alias root -deststorepass $keystorePass -file $certDir/chain.pem -noprompt -keystore $keystoreDir
}

# Restart Tomcat service
restartTomcat() {
  sendToLog "Restarting $serviceName"
  /bin/systemctl restart $serviceName
  if [ $? != 0 ]; then
    echo "ERROR: failed to restart $serviceName"
    sendToLog "ERROR: failed to restart $serviceName"
    exit 1
  fi
}

# Run functions
updateKeystore
restartTomcat

# Exit cleanly
sendToLog "All Done, Goodbye"
exit 0
