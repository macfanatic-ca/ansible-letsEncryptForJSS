#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

########################## Variables ##########################
# Service name for systemctl
serviceName=jamf.tomcat8
# Add URL after /live/
certDir=/etc/letsencrypt/live/{{ publicFQDN }}
# Web Root Directory
webRootDir=/var/www/html
# Location of JAVA Keytool
keytoolPATH=/bin/keytool
# Domain Name
myDomain={{ publicFQDN }}
# Email Address
myEmail={{ letsEncryptForJSS_email }}
# Location of keystore (found in server.xml)
keystoreDir=/usr/local/jss/tomcat/TomcatSSLKeystore
# Password for keystore (found in server.xml)
keystorePass={{ letsEncryptForJSS_keystorePass.stdout }}
# Test-only Cert (true || false)
testCert=false
# Backup Keystore (true || false)
backupKeystore=true
# Enable Logging (true || false)
debug=true
# Log Location
logLocation=/var/log/letsEncryptForJSS.log
######################## Do Not Modify ########################
sendToLog () {
if [ "$debug" == "true" ]; then
    logMessage=${*}
    date=`date "+%Y-%m-%d_%H:%M:%S"`
    echo "$date - $logMessage" >> $logLocation
fi
}

# Find certbot or certbot-auto
which certbot
if [ $? == 0 ]; then
    certbot=`which certbot`
    sendToLog "Found $cerbot"
elif [ $? != 0 ]; then
    which certbot-auto
    if [ $? == 0 ]; then
        certbot=`which certbot-auto`
        sendToLog "Found $cerbot"
    elif [ $? != 0 ]; then
        echo "ERROR: certbot not found, try running yum install certbot"
        sendToLog "ERROR: certbot not found, try running yum install certbot"
        exit 1
    fi
fi

# Create cert (prod or test)
# test cert
if [ $testCert == true ]; then
    sendToLog "Creating Test Certificate"
    $certbot certonly -a apache --test-cert -d $myDomain --keep --email $myEmail --agree-tos --quiet
# prod cert
elif [ $testCert == false ]; then
    sendToLog "Creating Production Certificate"
    $certbot certonly -a apache -d $myDomain --keep --email $myEmail --agree-tos --quiet
# error and quit
else
    echo "ERROR: Type of Certificate not specified"
    sendToLog "ERROR: Type of Certificate not specified"
    exit 1
fi

# Backup old keystore
if [ $backupKeystore == true ]; then
    sendToLog "Backing up old Keystore"
    cp -R $keystoreDir "$keystoreDir".old
fi

# Remove old certs
sendToLog "Removing old Certificates"
$keytoolPATH -delete -alias root -storepass $keystorePass -keystore $keystoreDir
$keytoolPATH -delete -alias tomcat -storepass $keystorePass -keystore $keystoreDir
$keytoolPATH -delete -alias cacert -storepass $keystorePass -keystore $keystoreDir

# Create P12
sendToLog "Creating P12 bundle"
/bin/openssl pkcs12 -export -in $certDir/fullchain.pem -inkey $certDir/privkey.pem -out $certDir/cert_and_key.p12 -name tomcat -CAfile $certDir/chain.pem -caname root -password pass:$keystorePass

# Import P12 into keystore
sendToLog "Importing P12 into keystore"
$keytoolPATH -importkeystore -srcstorepass $keystorePass -deststorepass $keystorePass -destkeypass $keystorePass -srckeystore $certDir/cert_and_key.p12 -srcstoretype PKCS12 -alias tomcat -keystore $keystoreDir
$keytoolPATH -import -trustcacerts -alias root -deststorepass $keystorePass -file $certDir/chain.pem -noprompt -keystore $keystoreDir

# Restart Tomcat service
sendToLog "Restarting $serviceName"
/bin/systemctl restart $serviceName
if [ $? != 0 ]; then
    echo "ERROR: failed to restart $serviceName"
    sendToLog "ERROR: failed to restart $serviceName"
    exit 1
fi

# Exit cleanly
sendToLog "All Done, Goodbye"
exit 0
